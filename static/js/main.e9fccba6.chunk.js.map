{"version":3,"sources":["components/Square/Square.js","components/GameBoard/GameBoard.js","components/GameStats/GameStats.js","components/Options/Options.js","components/Score/Score.js","constants/tetrominos.js","App.js","reportWebVitals.js","index.js"],"names":["Square","classList","this","props","shapeColor","hasBorder","className","React","Component","GameBoard","board","jsxBoard","i","length","row","jsxRow","j","cell","push","hideBorders","toString","renderBoard","GameStats","rotateValue","Options","onClick","onStart","onPause","Score","score","TETROMINOS","I","J","L","O","S","T","Z","SCORE_INCREMENTS","App","state","gameStarted","gameOver","paused","createEmptyBoard","currentRotationIndex","rowIndex","colIndex","currentShape","nextShape","intervalId","startGame","newIntervalId","setInterval","moveCurrentTetrominoDown","setState","getRandomTetrominoShape","togglePause","document","addEventListener","e","key","rotateCurrentTetromino","moveCurrentTetrominoLeft","moveCurrentTetrominoRight","Math","floor","random","Array","fill","map","_","positionList","every","col","BOARD_WIDTH","BOARD_HEIGHT","proposedPosition","getCurrentCoordinates","isTetrominoSpaceFree","currentPosition","scoreIncrement","newBoard","JSON","parse","stringify","clearFullRows","isGameOver","clearInterval","currentCoordinates","finalizeTetrominoPosition","scoreIndex","filter","x","unshift","coordinates","rotationOffset","currentShapeIndex","TETROMINO_SHAPES","currentRotation","dynamicBoard","getBoardContent","getNextItemContent","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e9fccba6.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Square.css';\r\n\r\nclass Square extends React.Component {\r\n  render() {\r\n    let classList = `tetromino-square`;\r\n    if (this.props.shapeColor) {\r\n      classList += ` ${this.props.shapeColor}`;\r\n    } else if (this.props.hasBorder) {\r\n      classList += ` empty-with-border`;\r\n    } else {\r\n      classList += ` empty`;\r\n    }\r\n\r\n    return <div className={classList}></div>;\r\n  }\r\n}\r\n\r\nexport default Square;\r\n","import React from 'react';\r\nimport './GameBoard.css';\r\nimport Square from '../Square/Square';\r\n\r\nclass GameBoard extends React.Component {\r\n  renderBoard() {\r\n    const board = this.props.board;\r\n    const jsxBoard = [];\r\n    for (let i = 0; i < board.length; ++i) {\r\n      const row = board[i];\r\n      const jsxRow = [];\r\n      for (let j = 0; j < row.length; ++j) {\r\n        const cell = row[j];\r\n        jsxRow.push(\r\n          <Square\r\n            shapeColor={cell}\r\n            hasBorder={!this.props.hideBorders}\r\n            key={cell + j}\r\n          />\r\n        );\r\n      }\r\n      jsxBoard.push(\r\n        <div className='row' key={row.toString() + i}>\r\n          {jsxRow}\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return jsxBoard;\r\n  }\r\n  render() {\r\n    return <div className='game-board'>{this.renderBoard()}</div>;\r\n  }\r\n}\r\n\r\nexport default GameBoard;\r\n","import React from 'react';\r\nimport './GameStats.css';\r\n\r\nimport GameBoard from '../GameBoard/GameBoard';\r\n\r\nclass GameStats extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className='game-stats'>\r\n        Next\r\n        <GameBoard\r\n          board={this.props.board}\r\n          rotateValue={0}\r\n          hideBorders={true}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GameStats;\r\n","import React from 'react';\r\nimport './Options.css';\r\n\r\nclass Options extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className='options'>\r\n        <button className='start-button' onClick={this.props.onStart}>\r\n          Start Game\r\n        </button>\r\n        <button className='pause-button' onClick={this.props.onPause}>\r\n          Pause\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Options;\r\n","import React from 'react';\r\nimport './Score.css';\r\n\r\nclass Score extends React.Component {\r\n  render() {\r\n    return <div className='score'>Score: {this.props.score}</div>;\r\n  }\r\n}\r\n\r\nexport default Score;\r\n","const TETROMINOS = {\r\n  I: [[[1, 1, 1, 1]], [[1], [1], [1], [1]]],\r\n  J: [\r\n    [\r\n      [1, 0, 0],\r\n      [1, 1, 1],\r\n    ],\r\n    [\r\n      [1, 1],\r\n      [1, 0],\r\n      [1, 0],\r\n    ],\r\n    [\r\n      [1, 1, 1],\r\n      [0, 0, 1],\r\n    ],\r\n    [\r\n      [0, 1],\r\n      [0, 1],\r\n      [1, 1],\r\n    ],\r\n  ],\r\n  L: [\r\n    [\r\n      [1, 1, 1],\r\n      [0, 0, 1],\r\n    ],\r\n    [\r\n      [1, 1],\r\n      [0, 1],\r\n      [0, 1],\r\n    ],\r\n    [\r\n      [0, 0, 1],\r\n      [1, 1, 1],\r\n    ],\r\n    [\r\n      [1, 0],\r\n      [1, 0],\r\n      [1, 1],\r\n    ],\r\n  ],\r\n  O: [\r\n    [\r\n      [1, 1],\r\n      [1, 1],\r\n    ],\r\n  ],\r\n  S: [\r\n    [\r\n      [1, 0],\r\n      [1, 1],\r\n      [0, 1],\r\n    ],\r\n    [\r\n      [0, 1, 1],\r\n      [1, 1, 0],\r\n    ],\r\n  ],\r\n  T: [\r\n    [\r\n      [1, 1, 1],\r\n      [0, 1, 0],\r\n    ],\r\n    [\r\n      [0, 1],\r\n      [1, 1],\r\n      [0, 1],\r\n    ],\r\n    [\r\n      [0, 1, 0],\r\n      [1, 1, 1],\r\n    ],\r\n    [\r\n      [1, 0],\r\n      [1, 1],\r\n      [1, 0],\r\n    ],\r\n  ],\r\n  Z: [\r\n    [\r\n      [1, 1, 0],\r\n      [0, 1, 1],\r\n    ],\r\n    [\r\n      [0, 1],\r\n      [1, 1],\r\n      [1, 0],\r\n    ],\r\n  ],\r\n};\r\n\r\nexport default TETROMINOS;\r\n","import './App.css';\nimport React from 'react';\n\nimport GameBoard from './components/GameBoard/GameBoard';\nimport GameStats from './components/GameStats/GameStats';\nimport Options from './components/Options/Options';\nimport Score from './components/Score/Score';\n\nimport TETROMINO_SHAPES from './constants/tetrominos';\n\nconst BOARD_WIDTH = 10;\nconst BOARD_HEIGHT = 20;\nconst SCORE_INCREMENTS = [0, 1, 3, 6, 10];\n\nexport default class App extends React.Component {\n  state = {\n    gameStarted: false,\n    gameOver: false,\n    paused: false,\n    score: 0,\n    board: this.createEmptyBoard(),\n    currentRotationIndex: 0,\n    rowIndex: 0,\n    colIndex: 4,\n    currentShape: null,\n    nextShape: null,\n    intervalId: null,\n  };\n  componentDidMount() {\n    document.addEventListener('keydown', e => {\n      if (!this.state.gameStarted || this.state.gameOver || this.state.paused) {\n        return;\n      }\n      if (e.key === 'ArrowUp') {\n        this.rotateCurrentTetromino();\n      }\n      if (e.key === 'ArrowDown') {\n        this.moveCurrentTetrominoDown();\n      }\n      if (e.key === 'ArrowLeft') {\n        this.moveCurrentTetrominoLeft();\n      }\n      if (e.key === 'ArrowRight') {\n        this.moveCurrentTetrominoRight();\n      }\n    });\n  }\n  getRandomTetrominoShape() {\n    const tetrominoShapes = ['I', 'J', 'L', 'O', 'S', 'T', 'Z'];\n    const index = Math.floor(Math.random() * 7.0);\n    return tetrominoShapes[index];\n  }\n  createEmptyBoard() {\n    return new Array(BOARD_HEIGHT)\n      .fill(null)\n      .map(_ => new Array(BOARD_WIDTH).fill(null));\n  }\n  startGame = () => {\n    let newIntervalId = this.state.intervalId;\n    const step = () => {\n      if (!this.state.paused) {\n        this.moveCurrentTetrominoDown();\n      }\n    };\n    if (newIntervalId === null) {\n      newIntervalId = setInterval(step, 1000);\n    }\n\n    this.setState({\n      gameStarted: true,\n      gameOver: false,\n      paused: false,\n      score: 0,\n      currentRotationIndex: 0,\n      rowIndex: 0,\n      colIndex: 4,\n      board: this.createEmptyBoard(),\n      currentShape: this.getRandomTetrominoShape(),\n      nextShape: this.getRandomTetrominoShape(),\n      intervalId: newIntervalId,\n    });\n  };\n  togglePause = () => {\n    this.setState({ paused: !this.state.paused });\n  };\n  isTetrominoSpaceFree(positionList, board = this.state.board) {\n    return positionList.every(\n      ({ col, row }) =>\n        col >= 0 &&\n        col <= BOARD_WIDTH - 1 &&\n        row >= 0 &&\n        row <= BOARD_HEIGHT - 1 &&\n        board[row][col] === null\n    );\n  }\n  rotateCurrentTetromino() {\n    const proposedPosition = this.getCurrentCoordinates(1);\n\n    if (this.isTetrominoSpaceFree(proposedPosition)) {\n      this.setState({\n        currentRotationIndex: this.state.currentRotationIndex + 1,\n      });\n    }\n  }\n  finalizeTetrominoPosition(currentPosition) {\n    let newBoard = JSON.parse(JSON.stringify(this.state.board));\n    let scoreIncrement = 0;\n    for (let { row, col } of currentPosition) {\n      newBoard[row][col] = this.state.currentShape;\n    }\n    [newBoard, scoreIncrement] = this.clearFullRows(newBoard);\n    const gameOver = this.isGameOver(newBoard);\n    if (gameOver) {\n      clearInterval(this.state.intervalId);\n    }\n    this.setState({\n      board: newBoard,\n      rowIndex: 0,\n      colIndex: 4,\n      currentShape: this.state.nextShape,\n      currentRotationIndex: 0,\n      nextShape: this.getRandomTetrominoShape(),\n      gameOver: gameOver,\n      intervalId: gameOver ? null : this.state.intervalId,\n      score: this.state.score + scoreIncrement,\n    });\n  }\n  moveCurrentTetrominoDown() {\n    const currentCoordinates = this.getCurrentCoordinates();\n    const proposedPosition = currentCoordinates.map(({ col, row }) => ({\n      col,\n      row: row + 1,\n    }));\n    if (this.isTetrominoSpaceFree(proposedPosition)) {\n      this.setState({\n        rowIndex: this.state.rowIndex + 1,\n      });\n    } else {\n      this.finalizeTetrominoPosition(currentCoordinates);\n    }\n  }\n  clearFullRows(board) {\n    const isRowNotFull = row => !row.every(x => typeof x === 'string');\n    board = board.filter(isRowNotFull);\n    const scoreIndex = BOARD_HEIGHT - board.length;\n    while (board.length < BOARD_HEIGHT) {\n      board.unshift(new Array(BOARD_WIDTH).fill(null));\n    }\n    return [board, SCORE_INCREMENTS[scoreIndex]];\n  }\n  isGameOver(newBoard) {\n    const coordinates = this.getCurrentCoordinates(\n      0,\n      this.state.nextShape,\n      0,\n      4,\n      0\n    );\n    return !this.isTetrominoSpaceFree(coordinates, newBoard);\n  }\n  moveCurrentTetrominoLeft() {\n    const proposedPosition = this.getCurrentCoordinates().map(\n      ({ col, row }) => ({ col: col - 1, row })\n    );\n    if (this.isTetrominoSpaceFree(proposedPosition)) {\n      this.setState({\n        colIndex: this.state.colIndex - 1,\n      });\n    }\n  }\n  moveCurrentTetrominoRight() {\n    const proposedPosition = this.getCurrentCoordinates().map(\n      ({ col, row }) => ({ col: col + 1, row })\n    );\n    if (this.isTetrominoSpaceFree(proposedPosition)) {\n      this.setState({\n        colIndex: this.state.colIndex + 1,\n      });\n    }\n  }\n  getCurrentCoordinates(\n    rotationOffset = 0,\n    currentShapeIndex = this.state.currentShape,\n    currentRotationIndex = this.state.currentRotationIndex,\n    colIndex = this.state.colIndex,\n    rowIndex = this.state.rowIndex\n  ) {\n    const currentShape = TETROMINO_SHAPES[currentShapeIndex];\n    if (typeof currentShape === 'undefined') {\n      return [];\n    }\n    const currentRotation =\n      currentShape[\n        (currentRotationIndex + rotationOffset) % currentShape.length\n      ];\n    const currentCoordinates = [];\n    for (let i = 0; i < currentRotation.length; ++i) {\n      for (let j = 0; j < currentRotation[i].length; ++j) {\n        if (currentRotation[i][j]) {\n          currentCoordinates.push({\n            col: colIndex + j,\n            row: rowIndex + i,\n          });\n        }\n      }\n    }\n    return currentCoordinates;\n  }\n  getBoardContent() {\n    const deepClone = x => JSON.parse(JSON.stringify(x));\n    const dynamicBoard = deepClone(this.state.board);\n    if (this.state.gameStarted && !this.state.gameOver) {\n      for (let { row, col } of this.getCurrentCoordinates()) {\n        dynamicBoard[row][col] = this.state.currentShape;\n      }\n    }\n    return dynamicBoard;\n  }\n  getNextItemContent() {\n    const board = new Array(3).fill(null).map(_ => new Array(4).fill(0));\n    const coordinates = this.getCurrentCoordinates(\n      0,\n      this.state.nextShape,\n      0,\n      0,\n      0\n    );\n    if (this.state.gameStarted && !this.state.gameOver) {\n      for (let { row, col } of coordinates) {\n        board[row][col] = this.state.nextShape;\n      }\n    }\n    return board;\n  }\n\n  render() {\n    return (\n      <div className='App'>\n        <h1 className='header'>\n          Tetris {this.state.gameOver ? '(Game Over)' : ''}\n        </h1>\n        <GameBoard board={this.getBoardContent()} />\n        <Options onStart={this.startGame} onPause={this.togglePause} />\n        <GameStats board={this.getNextItemContent()} />\n        <Score score={this.state.score} />\n      </div>\n    );\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}